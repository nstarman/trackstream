# We set the language to c because python isn't supported on the MacOS X nodes
# on Travis. However, the language ends up being irrelevant anyway, since we
# install Python ourselves using conda.
language: python

compiler: gcc

os:
    - linux

# Cache can be cleared from the travis settings menu, see docs currently at
# https://docs.travis-ci.com/user/caching#Clearing-Caches
cache:
  - ccache
  - .hypothesis

# We need a full clone to make sure setuptools_scm works properly
git:
    depth: false

branches:
  only:
    - master

# The apt packages below are needed for sphinx builds. A full list of packages
# that can be included can be found here:
#
# https://github.com/travis-ci/apt-package-whitelist/blob/master/ubuntu-precise

addons:
    apt:
        packages:
            - graphviz
            - pandoc

env:
    global:

        # Set defaults to avoid repeating in most cases
        # By default, we run our jobs with tox.
        - SETUP_METHOD='tox'

        # The following versions are the 'default' for tests, unless
        # overridden underneath. They are defined here in order to save having
        # to repeat them for all configurations.

        # The following three variables are for tox. TOXENV is a standard
        # variable that tox uses to determine the environment to run,
        # TOXARGS are arguments passed to tox, and TOXPOSARGS are arguments
        # that tox passes through to the {posargs} indicator in tox.ini.
        # The latter can be used for example to pass arguments to pytest.
        - TOXENV='test'
        - TOXARGS='-v'
        - TOXPOSARGS=''

        # For installing without tox, we can rely mostly on what Debian already
        # includes.  This is only used if SETUP_METHOD='apt'.
        # Note that this also means it can be used to test whether astropy can
        # properly use the system libraries, since the python3-astropy package
        # pulls those in (i.e., one can and should use ASTROPY_USE_SYSTEM_ALL=1).
        - APT_DEPENDENCIES="python3-pip python3-dev libpython3.8-dev python3.8-dev libexpat1-dev zlib1g-dev libc6-dev python3-venv python3-setuptools cython3 python3-astropy python3-numpy wcslib-dev libcfitsio-dev python3-pytest-astropy ipython3 python3-pytest-cov python3-pytest-xdist python3-objgraph python3-coverage python3-attr python3-colorama tzdata"

        # The following is needed to avoid issues if e.g. Matplotlib tries
        # to open a GUI window.
        - SETUP_XVFB=True

stages:
   # Do the style check and a single test job, don't proceed if it fails
   - name: Initial tests
   # Test docs, astropy dev, and without optional dependencies
   - name: Comprehensive tests
   # Final Tests
   - name: Final tests
   # These will only run when cron is opted in
   - name: Cron tests
     if: type = cron

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:

        # ---------------------------------------------
        # Initial Tests

        # Do a regular build on Linux with Python 3.8, with cov
        # For Linux we use language: python to avoid using conda.
        - os: linux
          python: 3.8
          name: Python 3.8 with minimal dependencies and measure coverage
          stage: Initial tests
          env: TOXENV=py38-test-cov

        # Do a PEP8 test with flake8
        - os: linux
          python: 3.8
          name: Code style checks
          stage: Initial tests
          env: TOXENV=codestyle

        # ---------------------------------------------
        # Comprehensive Tests

        # For the Numpy 1.17 build we use oldestdeps not numpy117 since we can check
        # the oldest version of all dependencies where this is known. We also check
        # that tests do not open and leave open any files. This has a performance
        # impact on running the tests, hence why it is not enabled by default.
        - language: python
          python: 3.7
          stage: Comprehensive tests
          name: Python 3.7 with oldest supported version of all dependencies
          env: TOXENV="py37-test-oldestdeps"
               TOXPOSARGS="--open-files"

        # Full tests with coverage checks.
        - language: python
          python: 3.7
          stage: Comprehensive tests
          name: Python 3.7 with all deps and full coverage
          env: TOXENV="py37-test-alldeps-numpy117-cov"
               TOXPOSARGS="--remote-data=astropy"
               LC_CTYPE=C.ascii LC_ALL=C

        # # Check for sphinx doc build warnings
        # # Only needed if RTD is not set to build pull requests
        # - os: linux
        #   python: 3.8
        #   name: Documentation build
        #   stage: Comprehensive tests
        #   env: TOXENV=build_docs

        # ---------------------------------------------
        # Final Tests

        # And with an older Python, Astropy LTS, and the oldest supported Numpy
        - os: linux
          python: 3.7
          name: Python 3.7 astropy LTS and Numpy 1.17
          stage: Final tests
          env: TOXENV=py37-test-astropylts-numpy117

        # Try other python versions and Numpy versions. Since we can assume that
        # the Numpy developers have taken care of testing Numpy with different
        # versions of Python, we can vary Python and Numpy versions at the same
        # time.
        - os: linux
          python: 3.8
          name: Python 3.8 with bleeding dev
          stage: Final tests
          env: TOXENV=py38-test-devdeps

        # ---------------------------------------------
        # Cron Tests

        # Try MacOS X, usually enough only to run from cron as hardly there are
        # issues that are not picked up by a linux worker. We set language to
        # 'c' since 'python' doesn't work on non-Linux platforms.
        - os: osx
          language: c
          name: Python 3.7 with all optional dependencies for OSX
          stage: Cron tests
          env: PYTHON_VERSION=3.7
               TOXENV="py37-test-alldeps"
               TOXPOSARGS="--remote-data=trackstream"
               CONDA_DEPENDENCIES="clang"
               CCOMPILER=clang

        # We check numpy-dev also in a job that only runs from cron, so that
        # we can spot issues sooner. We do not use remote data here, since
        # that gives too many false positives due to URL timeouts.
        # We also install all dependencies via pip here so we pick up the latest
        # releases.
        - language: python
          python: 3.8
          name: Python 3.8 with dev version of key dependencies
          stage: Cron tests
          env: TOXENV="py38-test-devdeps"

        # Run documentation link check in a cron job.
        # Was originally in CircleCI doc build but links are too flaky, so
        # we moved it here instead.
        - language: python
          python: 3.8
          name: Documentation link check
          stage: Cron tests
          env: TOXENV='linkcheck'
          addons:
              apt:
                  packages:
                      - graphviz

        # Test against Python dev in cron job.
        - language: python
          python: 3.9-dev
          dist: bionic
          name: Python dev with basic dependencies
          stage: Cron tests
          env: TOXENV="pydev-test"
               TOXPOSARGS="--durations=50"
          compiler: clang

        # Also regularly try the big-endian s390 architecture, in the
        # process checking that installing dependencies with apt works.
        - name: big-endian s390x architecture with apt
          arch: s390x
          language: c
          dist: bionic
          stage: Cron tests
          env: SETUP_METHOD='apt'
               ASTROPY_USE_SYSTEM_ALL=1

        # And with an arm64 processor, again with apt for convenience.
        - name: arm64 architecture with apt
          arch: arm64
          language: c
          dist: bionic
          stage: Cron tests
          env: SETUP_METHOD='apt'
               ASTROPY_USE_SYSTEM_ALL=1

        # Regularly make sure that trackstream can be used in application bundles
        - language: python
          python: 3.8
          dist: bionic
          name: bundling with pyinstaller
          stage: Cron tests
          env: TOXENV="pyinstaller"

    allow_failures:

        # Try on Windows. Allowed to fail b/c astronat.
        - os: windows
          language: c
          name: Python 3.8 with required dependencies
          stage: Comprehensive tests
          env: PYTHON_VERSION=3.8 TOXENV=py38-test

        - os: linux
          python: 3.8
          name: Black style check
          stage: Final tests
          env: TOXENV=black

        - os: linux
          python: 3.8
          name: mypy check
          stage: Final tests
          env: TOXENV=mypy

        - os: linux
          python: 3.8
          name: unused code check
          stage: Final tests
          env: TOXENV=unused_code

        - os: linux
          python: 3.8
          name: RST link check
          stage: Final tests
          env: TOXENV=linkcheck

before_install:

    # We need to use CCOMPILER otherwise Travis overwrites CC if we define it
    # in env: above.
    - if [ ! -z $CCOMPILER ]; then
        export CC=$CCOMPILER;
      fi

    # Check CC variable
    - echo "CC="$CC

    # So codecov can find the coverage report
    - if [[ $TOXENV == *-cov ]]; then
        export TOXPOSARGS=$TOXPOSARGS" --cov-report=xml:"$TRAVIS_BUILD_DIR"/coverage.xml";
      fi

    # echo for debugging purposes
    - echo "TOXENV="$TOXENV
    - echo "TOXARGS="$TOXARGS
    - echo "TOXPOSARGS="$TOXPOSARGS

install:

    # We now use the ci-helpers package to set up our Python environment
    # on Windows and MacOS X but we don't set up any other dependencies,
    # instead using tox to do this. See https://github.com/astropy/ci-helpers
    # for more information about ci-helpers.

    - if [[ $TRAVIS_OS_NAME != linux ]]; then
        git clone --depth 1 git://github.com/astropy/ci-helpers.git;
        source ci-helpers/travis/setup_conda.sh;
      fi

    # For APT key updates, see https://ftp-master.debian.org/keys.html
    - if [ $SETUP_METHOD == 'apt' ]; then
        curl https://ftp-master.debian.org/keys/archive-key-10.asc | sudo apt-key add -;
        echo "deb http://ftp.us.debian.org/debian testing main" | sudo tee -a /etc/apt/sources.list;
        sudo apt-get -qq update;
        sudo apt-get install -t testing -y --no-install-recommends ${APT_DEPENDENCIES};
      fi

script:
    - if [ $SETUP_METHOD == 'tox' ]; then
        pip install tox;
        tox $TOXARGS -- $TOXPOSARGS;
      else
        echo "not tox"
        python3 -m venv --system-site-packages tests;
        source tests/bin/activate;
        pip3 install -e .[test];
        python3 -m pytest;
      fi

after_success:
    - if [[ $TOXENV == *-cov ]]; then
        pip install codecov;
        codecov --gcov-glob "*cextern*";
      fi

notifications:
    slack:
        secure: YBzAT+qqzFfA9vCXzZ83Kktt+zQ84Skrx2wBO0WwUQOaVmvzEB2YTYlMxy+eAkRglimjf3q9i+qlyFYHIIDaKShR85hDWhUgMBzbxESZzF8H8Ee1gRBnNTxFvVTtvWW2eSTwTo0mWLtfcl6aOWpg1ya42h3dazF+04SqPoG6fXZJEtjEZvnb+1F7DfcWzR9dNqv7ecJ+YyJKvYZ4MPV/d1isotTQwXcW005Ov59iDSAduKlEtcRCZ1w4inrAM72ZN7y7XR9oEQcXTs+g4qBQxPmSdU99bq/TDvkFfp55hZoBUaQR0PPfBXI50pCFN31gIW2RWjSCYlQhQYeJrFulmB8q5tWCTyzsqsvWhMXTWmoIQ6PO2KWuM1rLLaENJurFEPMt3DJRmHOsR1awuMo9tio//7mHpXFgrTxkjJPYuyKswXRc08hgnhWHHrmdQg4bbBB1y88Ze/synZUB60Lg0TWA9LTvkXveWcmhTGvCnAWzhPkd3oCmhD/Qg7+3hPPYeUlVfzu/jD1ZLrKAB9AFPDobNVfucqhHrBuA7a9losClD4gJr5pQJjMk07M9xdi544KID2abmaFXWFiCKOxeCNSqhPhuMknyWJpyuSLpoXyiEkxSYyFXEqlK3D5rGCF3HAdc4NOvPsAccRzEkAtYNvXMvWJ78X8Idn2mgnPW9A8=
